/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import GetData.GetFile;
import Model.Envio;
import Model.archivoVideo;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mario
 */
public final class Lista extends javax.swing.JFrame {

    /**
     * Creates new form Lista
     */
    public Lista() {
        initComponents();
        obtencionDia();
        llenadoHoras();
        recargaLista();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    List<archivoVideo> file = new ArrayList<archivoVideo>();
    List<archivoVideo> hora = new ArrayList<archivoVideo>();

    //Método para recargar lista de reproducción
    public void recargaLista() {
        Envio envio = new Envio();
        file = new GetFile().obtenerArchivo(envio);
        llenadoTabla();
    }

    int horaInicio[] = new int[hora.size()];

    //Método para el llenado del vextor de la hora de inicio
    public void llenadoHoras() {
        Envio envio = new Envio();
        String hour;
        hora = new GetFile().obtenerHora();

        if (hora.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No hay listas cargadas en el servidor para este kiosko", "SIN LISTAS DE REPRODUCCION", JOptionPane.WARNING_MESSAGE);
        } else {
            System.out.println("ENTRO");            

            for (int i = 0; i < hora.size(); i++) {
                hour = hora.get(i).getHoraInicio().toString() + hora.get(i).getMinutosInicio();
                horaInicio[i] = Integer.parseInt(hour);
            }
            obtencionLista();
        }
    }

    //Método para conseguir la Lista de Reproduccion de ese momento 
    public void obtencionLista() {
        String hor = obtencionHora();
        String min = obtencionMinutos();
        String prueba = hor + min;
        System.out.println("ENTRADA: " + prueba);
        int hour = Integer.parseInt(prueba);
        Integer horaLista = 0, guardar = 0;

        for (int i = 0; i < horaInicio.length; i++) {
            if (hour == horaInicio[i]) {
                horaLista = horaInicio[i];
                break;
            } else {
                if (hour < horaInicio[i]) {
                    guardar = horaInicio[i];
                } else {
                    if (hour > horaInicio[i]) {
                        horaLista = guardar;
                        break;
                    }
                }
            }
        }

        prueba = hor + ":" + min;
        System.out.println("SALIDA: " + prueba);

        Envio.setHoraInicio(prueba);
    }

    //Método para llenado de la tabla 
    public void llenadoTabla() {

        DefaultTableModel modelo = new DefaultTableModel();
        listaReproduccion.setModel(modelo);
        modelo.addColumn("Nombre");
        modelo.addColumn("Duración");
        modelo.addColumn("Posición");
        modelo.addColumn("Tipo");

        Object tab[] = new Object[4];

        for (int i = 0; i < file.size(); i++) {
            tab[0] = file.get(i).getNombre();
            tab[1] = file.get(i).getDuracion();
            tab[2] = file.get(i).getUbicacion();
            tab[3] = file.get(i).getTipo();
            modelo.addRow(tab);
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listaReproduccion = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listaReproduccion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Lista de Reproducción", "Videos", "Ubicación", "Duración"
            }
        ));
        jScrollPane1.setViewportView(listaReproduccion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    Calendar c = Calendar.getInstance();

    //Método para obtener el día del sistema
    public void obtencionDia() {
        String dia = "";
        System.out.println("DIA" + c.get(Calendar.DAY_OF_WEEK));
        switch (c.get(Calendar.DAY_OF_WEEK)) {
            case 0:
                dia = "DOMINGO";
                break;

            case 1:
                dia = "LUNES";
                break;

            case 2:
                dia = "MARTES";
                break;

            case 3:
                dia = "MIERCOLES";
                break;

            case 4:
                dia = "JUEVES";
                break;

            case 5:
                dia = "VIERNES";
                break;

            case 6:
                dia = "SABADO";
                break;
        }
        Envio.setDia(dia);
    }

    //Método para obtener la hora del sistema
    public String obtencionHora() {
        return Integer.toString(c.get(Calendar.HOUR_OF_DAY));
    }

    //Método para obtener los minutos actuales del sistema
    public String obtencionMinutos() {
        return Integer.toString(c.get(Calendar.MINUTE));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Lista().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable listaReproduccion;
    // End of variables declaration//GEN-END:variables
}
