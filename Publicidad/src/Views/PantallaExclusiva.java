/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import GetData.GetFile;
import Model.Envio;
import Model.archivoVideo;
import Model.checarNuevasListas;
import java.awt.Dimension;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import org.apache.commons.io.FilenameUtils;
import uk.co.caprica.vlcj.binding.LibVlc;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;
import uk.co.caprica.vlcj.player.MediaPlayerFactory;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;
import uk.co.caprica.vlcj.player.embedded.windows.Win32FullScreenStrategy;
import uk.co.caprica.vlcj.runtime.RuntimeUtil;
import uk.co.caprica.vlcj.runtime.x.LibXUtil;

/**
 *
 * @author nipan
 */
public final class PantallaExclusiva extends javax.swing.JFrame {

    /**
     * Creates new form PantallaExclusiva
     *
     * @throws java.io.IOException
     */
    public PantallaExclusiva() throws IOException {
        initComponents();
        tamañoPantalla();
        setLocationRelativeTo(null);
        this.setVisible(true);
        this.setLocation(Envio.getPosicion(), Envio.getTamaño());
        cambiarLibrerias();
        Lista list = new Lista();
        list.setVisible(true);
        reproducirVideo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        video = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        javax.swing.GroupLayout videoLayout = new javax.swing.GroupLayout(video);
        video.setLayout(videoLayout);
        videoLayout.setHorizontalGroup(
            videoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 516, Short.MAX_VALUE)
        );
        videoLayout.setVerticalGroup(
            videoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 351, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(video, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(video, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static int duracion;
    static int archivo = -1;
    static private EmbeddedMediaPlayerComponent player;

    //Método que ejecuta el video
    public void reproducirVideo() throws IOException {
        List<archivoVideo> hora = new ArrayList<archivoVideo>();
        hora = new GetFile().obtenerHora();

        if (!hora.isEmpty()) {

            MediaPlayerFactory mediaPlayerFactory = new MediaPlayerFactory();
            EmbeddedMediaPlayer mediaPlayer = mediaPlayerFactory.newEmbeddedMediaPlayer(new Win32FullScreenStrategy(this));

            player = new EmbeddedMediaPlayerComponent();
            //se añade reproductor 
            video.add(player);
            player.setSize(video.getSize());
            player.setVisible(true);

            try {
                checarNuevasListas checar = new checarNuevasListas();
                checar.start();

                recargaLista();
                cargarMedia(mediaPlayer);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error en " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
                reproducirVideo();
            }
        } else {
            this.setVisible(false);
        }

        //mediaPlayer.prepareMedia("http://192.168.1.139:1080/smp/Publicidad/src/Video/Prueba.mp4"); //Servidor
        //Reproduce el video
        //mediaPlayer.play();        
    }

    static List<archivoVideo> file = new ArrayList<archivoVideo>();

    //Método para obtener la ruta del archivo
    public static String rutaArchivo() {
        if (file.isEmpty()) {
            return "";
        } else {
            return file.get(archivo).getUbicacion();
        }
    }

    //Método para obtener la duracion del medio
    public static int duracionMedio() {
        return file.get(archivo).getDuracion();
    }

    //Método para reinicializar variable archivo
    public static void reinicializarArchivo() {
        archivo = -1;
    }

    //Método para saber la extensión del archivo
    public String extensionArchivo(String ruta) {
        //Obtiene la extensión del archivo        
        return FilenameUtils.getExtension(ruta);
    }

    //Método para recargar lista de reproducción
    public static void recargaLista() throws IOException {
        file = new GetFile().obtenerArchivo();
    }

    ImageIcon img;
    static String ruta;

    //Método para cargar el video
    public void cargarMedia(EmbeddedMediaPlayer mediaPlayer) {
        archivo++;
        ruta = rutaArchivo();
        if (!ruta.equalsIgnoreCase("")) {
            //String extension = extensionArchivo(ruta);
            duracion = duracionMedio();

            /*if (!"".equals(ruta) || duracion != 0) {
            if (extension.equalsIgnoreCase("PNG") || extension.equalsIgnoreCase("ICO") || extension.equalsIgnoreCase("JPG") || extension.equalsIgnoreCase("BMP") || extension.equalsIgnoreCase("TIF") || extension.equalsIgnoreCase("JPGE")) {
                //Método que se ejecuta si es imagen el archivo            
                imagen.setVisible(true);
                
                if (archivo == (file.size() - 1)) {
                    archivo = -1;
                }

                img = new ImageIcon(ruta);
                imagen(img);
                
                Timer timer = new Timer();
                TimerTask task = new TimerTask() {
                    @Override
                    public void run() {
                        try {
                            cargarMedia(mediaPlayer);
                            timer.cancel();
                        } catch (IOException ex) {
                            Logger.getLogger(PantallaExclusiva.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                };
                timer.schedule(task, 0, (duracion * 1000 - 800));
                System.out.println(archivo);

            } else {*/
            //Método que se ejecuta si el archivo es video            
            player.getMediaPlayer().playMedia(ruta);
            System.out.println(ruta);
            player.getMediaPlayer().addMediaPlayerEventListener(new MediaPlayerEventAdapter() {
                @Override
                public void playing(MediaPlayer prueba) {
                    Timer timer = new Timer();
                    TimerTask task = new TimerTask() {
                        @Override
                        public void run() {
                            if (!prueba.isPlaying()) {
                                timer.cancel();
                                prueba.stop();
                            }
                        }
                    };
                    timer.schedule(task, 10, (duracion * 1000 - 800));
                }

                @Override
                public void finished(MediaPlayer prueba) {
                    if (archivo == (file.size() - 1)) {
                        archivo = -1;

                        try {
                            recargaLista();
                            Lista.recargaLista();
                        } catch (IOException ex) {
                            Logger.getLogger(PantallaExclusiva.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        cargarMedia(mediaPlayer);

                        prueba.removeMediaPlayerEventListener(this);
                    } else {
                        cargarMedia(mediaPlayer);
                        prueba.removeMediaPlayerEventListener(this);
                    }

                }

                @Override
                public void error(MediaPlayer prueba) {
                    if (archivo == (file.size() - 1)) {
                        archivo = -1;

                        try {
                            recargaLista();
                            Lista.recargaLista();
                        } catch (IOException ex) {
                            Logger.getLogger(PantallaExclusiva.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        cargarMedia(mediaPlayer);

                        prueba.removeMediaPlayerEventListener(this);
                    } else {
                        cargarMedia(mediaPlayer);
                        prueba.removeMediaPlayerEventListener(this);
                    }
                }
            });
            /*    }

        } else {
            try {
                cargarMedia(mediaPlayer);
            } catch (IOException ex) {
                Logger.getLogger(PantallaExclusiva.class.getName()).log(Level.SEVERE, null, ex);
            }
        }*/
        }
    }

    //Método para leer librerias directas del VLC de 64 bits
    static void cambiarLibrerias() {
        NativeLibrary.addSearchPath(RuntimeUtil.getLibVlcLibraryName(), "C:\\Program Files\\VideoLAN\\VLC");
        Native.loadLibrary(RuntimeUtil.getLibVlcLibraryName(), LibVlc.class);
        LibXUtil.initialise();
    }

    //método para fijar el tamaño de la pantalla
    public void tamañoPantalla() {
        this.setSize(new Dimension(Envio.getAncho(), Envio.getAlto()));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaExclusiva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new PantallaExclusiva().setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(PantallaExclusiva.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JPanel video;
    // End of variables declaration//GEN-END:variables

}
